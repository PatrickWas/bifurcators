Web VPython 3.2

def logistic(r, X):
    return r*X*(1-X)

seed = float(input(prompt="Put a starting x between 0 and 1:"))

N = int(input(prompt="How many iterations > 500 would you like to run? (ints only duh)"))


g = graph(title="Rabbits", xtitle="r", ytitle="Final population fraction(s)", ymin=0, ymax=1, xmin=0, xmax=4)
g2 = graph(title="Rabbits", xtitle="r", ytitle="Final population fraction(s)", xmin=2.9, xmax=3.6, ymin=0, ymax=1)
#g3 = graph(title="Rabbits", xtitle="r", ytitle="Final population fraction(s)", xmin=3.53, xmax=3.6, ymin=0, ymax=1)
gd = gdots(graph=g, radius=1)
gd2 = gdots(graph=g2, radius=2)
#gd3 = gdots(graph=g3, radius=2)

truths = [False] * 10
truths[0] = True

sum = 1

#bifs = []

i = 0
while i < 4:
    print(i)
    X = []
    X.append(seed)
    for j in range(1, N+1):
        frac = logistic(i, X[j-1])
        #gd.color = vec(frac, frac, frac)
        X.append(frac)
        if j > N-sum:
            for k in range(0, len(truths) - 1):
                if truths[k] and ! truths[k+1]:
                    if (int) (frac*2000) != (int) (X[j-2**k]*2000):
                        truths[k+1] = True
                        sum*=2
                        k = len(truths)
#                        bifs.append(i)
            gd.plot(i, frac)
            if (i >= 2.9 and i <= 3.6):
                gd2.plot(i, frac)
#                if (i >= 3.53):
#                    gd3.plot(i, frac)
                
    if i >= 2.9 and i <= 3.6:
        i-=0.005
#        if i >= 3.53:
#            i-=0.004
    i += 0.01
            #print(frac)
#print(bifs)
#for i in range(2, len(bifs)):
#    denom = bifs[i] - bifs[i-1]
#    if denom != 0:
#        print((bifs[i-1] - bifs[i-2]) / denom)

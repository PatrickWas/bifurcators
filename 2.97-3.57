Web VPython 3.2

def logistic(r, X):
    return r*X*(1-X)

seed = float(input(prompt="Put a starting x between 0 and 1:"))

N = int(input(prompt="How many iterations > 500 would you like to run? (ints only duh)"))


#g = graph(title="Rabbits", xtitle="r", ytitle="Final population fraction(s)")
#gd = gdots()

truths = [False] * 10
truths[0] = True

bifs = []

for i in range(3, 3.57, 0.0001):
    X = []
    X.append(seed)
    for j in range(1, N+1):
        frac = logistic(i, X[j-1])
        X.append(frac)
        if j > N-1:
            for k in range(0, len(truths) - 1):
                if truths[k] and ! truths[k+1]:
                    if (int) (frac*N/5) != (int) (X[j-2**k]*N/5):
                        truths[k+1] = True
                        bifs.append(i)
            #gd.plot(i, frac)
            #print(frac)
print(bifs)
for i in range(2, len(bifs)):
    denom = bifs[i] - bifs[i-1]
    if denom != 0:
        print((bifs[i-1] - bifs[i-2]) / denom)
